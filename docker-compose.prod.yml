version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: apimanager-postgres-prod
    environment:
      POSTGRES_DB: apimanager
      POSTGRES_USER: apimanager_user
      POSTGRES_PASSWORD: apimanager_password
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - apimanager-network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: apimanager-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - apimanager-network
    restart: unless-stopped

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: apimanager-backend-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://apimanager_user:apimanager_password@postgres:5432/apimanager
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      PORT: 8000
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - apimanager-network
    restart: unless-stopped
    command: npm start

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: apimanager-frontend-prod
    environment:
      VITE_API_URL: http://localhost:8000/api
      VITE_APP_NAME: API Manager
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - apimanager-network
    restart: unless-stopped
    command: serve -s dist -l 3000

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: apimanager-nginx-prod
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - apimanager-network
    restart: unless-stopped

volumes:
  postgres_data_prod:
  redis_data_prod:

networks:
  apimanager-network:
    driver: bridge 